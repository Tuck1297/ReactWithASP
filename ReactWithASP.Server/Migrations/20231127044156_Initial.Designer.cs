// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ReactWithASP.Server.Data;

#nullable disable

namespace ReactWithASP.Server.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231127044156_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ReactWithASP.Server.Models.ConnectionStrings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("dbEncryptedConnectionString")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dbName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("dbType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("ConnectionStrings");
                });

            modelBuilder.Entity("ReactWithASP.Server.Models.User", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3d9b69ef-b6f8-4df6-bf70-9686bf314822"),
                            Email = "dev@tuckerjohnson.me",
                            FirstName = "Tucker",
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$7XpJU1Kdb.s2QdyppYRzyOypn7/K/MT0BFM/icN0KWbVqOUauBLtm",
                            Role = "SuperUser"
                        },
                        new
                        {
                            UserId = new Guid("01c3efa2-3427-410b-9d17-df532fd24e68"),
                            Email = "hashtimemail@gmail.com",
                            FirstName = "Tucker",
                            LastName = "Johnson",
                            PasswordHash = "$2a$11$90xoxbnjmJQbNBgWmgDBqeJeX8zIE43eiO5gkTSDzV0CcbvNK0pOK",
                            Role = "Admin"
                        });
                });

            modelBuilder.Entity("ReactWithASP.Server.Models.ConnectionStrings", b =>
                {
                    b.HasOne("ReactWithASP.Server.Models.User", "User")
                        .WithMany("ConnectionStrings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ReactWithASP.Server.Models.User", b =>
                {
                    b.Navigation("ConnectionStrings");
                });
#pragma warning restore 612, 618
        }
    }
}
